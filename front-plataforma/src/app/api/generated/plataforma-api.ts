/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * /api/auth
 * API for managing user accounts in the platform
 * OpenAPI spec version: 1.0.0
 */
import {
  HttpClient
} from '@angular/common/http';
import type {
  HttpContext,
  HttpEvent,
  HttpHeaders,
  HttpParams,
  HttpResponse as AngularHttpResponse
} from '@angular/common/http';

import {
  Injectable
} from '@angular/core';

import {
  Observable
} from 'rxjs';

import type {
  LoginResponse,
  RoleModel,
  StudentLoginDTO,
  StudentModel,
  StudentProfileDTO,
  StudentRegisterDTO
} from './model';

type HttpClientOptions = {
  headers?: HttpHeaders | {
      [header: string]: string | string[];
  };
  context?: HttpContext;
  observe?: any;
  params?: HttpParams | {
    [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;
  };
  reportProgress?: boolean;
  responseType?: any;
  withCredentials?: boolean;
};



@Injectable({ providedIn: 'root' })
export class ApiAuthService {
  constructor(
    private http: HttpClient,
  ) {}/**
 * Atualiza os dados do perfil de um aluno existente
 * @summary Atualizar perfil do aluno
 */
 updateProfile<TData = void>(
    id: string,
    studentProfileDTO: StudentProfileDTO, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    updateProfile<TData = void>(
    id: string,
    studentProfileDTO: StudentProfileDTO, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    updateProfile<TData = void>(
    id: string,
    studentProfileDTO: StudentProfileDTO, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;updateProfile<TData = void>(
    id: string,
    studentProfileDTO: StudentProfileDTO, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.put<TData>(
      `/api/auth/update/${id}`,
      studentProfileDTO,options
    );
  }

 getAllRoles<TData = RoleModel[]>(
     options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    getAllRoles<TData = RoleModel[]>(
     options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    getAllRoles<TData = RoleModel[]>(
     options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;getAllRoles<TData = RoleModel[]>(
     options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.get<TData>(
      `/dashboard_admin/roles`,options
    );
  }

 createRole<TData = RoleModel>(
    roleModel: RoleModel, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    createRole<TData = RoleModel>(
    roleModel: RoleModel, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    createRole<TData = RoleModel>(
    roleModel: RoleModel, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;createRole<TData = RoleModel>(
    roleModel: RoleModel, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.post<TData>(
      `/dashboard_admin/roles`,
      roleModel,options
    );
  }

/**
 * Registra um novo aluno na plataforma
 * @summary Cadastro de aluno
 */
 register<TData = StudentModel>(
    studentRegisterDTO: StudentRegisterDTO, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    register<TData = StudentModel>(
    studentRegisterDTO: StudentRegisterDTO, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    register<TData = StudentModel>(
    studentRegisterDTO: StudentRegisterDTO, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;register<TData = StudentModel>(
    studentRegisterDTO: StudentRegisterDTO, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.post<TData>(
      `/api/auth/register`,
      studentRegisterDTO,options
    );
  }

/**
 * Realiza login e retorna token JWT
 * @summary Login do aluno
 */
 login<TData = LoginResponse>(
    studentLoginDTO: StudentLoginDTO, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    login<TData = LoginResponse>(
    studentLoginDTO: StudentLoginDTO, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    login<TData = LoginResponse>(
    studentLoginDTO: StudentLoginDTO, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;login<TData = LoginResponse>(
    studentLoginDTO: StudentLoginDTO, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.post<TData>(
      `/api/auth/login`,
      studentLoginDTO,options
    );
  }

/**
 * Retorna os dados do aluno autenticado com base no token JWT
 * @summary Obter dados do aluno logado
 */
 getCurrentStudent<TData = StudentModel>(
     options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    getCurrentStudent<TData = StudentModel>(
     options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    getCurrentStudent<TData = StudentModel>(
     options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;getCurrentStudent<TData = StudentModel>(
     options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.get<TData>(
      `/api/auth/me`,options
    );
  }

/**
 * Retorna os dados do aluno com o ID informado
 * @summary Buscar aluno por ID
 */
 findById<TData = StudentModel>(
    id: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    findById<TData = StudentModel>(
    id: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    findById<TData = StudentModel>(
    id: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;findById<TData = StudentModel>(
    id: string, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.get<TData>(
      `/api/auth/find/${id}`,options
    );
  }

 deleteRole<TData = void>(
    id: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    deleteRole<TData = void>(
    id: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    deleteRole<TData = void>(
    id: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;deleteRole<TData = void>(
    id: string, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.delete<TData>(
      `/dashboard_admin/roles/${id}`,options
    );
  }

/**
 * Remove um aluno pelo ID
 * @summary Deletar aluno
 */
 _delete<TData = void>(
    id: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    _delete<TData = void>(
    id: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    _delete<TData = void>(
    id: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;_delete<TData = void>(
    id: string, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.delete<TData>(
      `/api/auth/delete/${id}`,options
    );
  }

};

export type UpdateProfileClientResult = NonNullable<void>
export type GetAllRolesClientResult = NonNullable<RoleModel[]>
export type CreateRoleClientResult = NonNullable<RoleModel>
export type RegisterClientResult = NonNullable<StudentModel>
export type LoginClientResult = NonNullable<LoginResponse>
export type GetCurrentStudentClientResult = NonNullable<StudentModel>
export type FindByIdClientResult = NonNullable<StudentModel>
export type DeleteRoleClientResult = NonNullable<void>
export type _DeleteClientResult = NonNullable<void>
